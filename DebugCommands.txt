-- ======================================================== DIRECTORY ===============================================================

--C:\Users\James\Documents\GitHub\PLC_1718\src

-- ======================================================== USEFUL STRUCTURES ===============================================================


--ParseTree example
(Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))  )
(Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) (EquateNode (SingleNode (Vari ("A") ("*") ("x1")))  (SingleNode (Vari ("B") ("*") ("x2"))))  )

evaluateParseTree (Marker ([(Vari "*" "*" "x1" ),(Vari "*" "*" "x2" )]) (EquateNode (VarOp(SingleNode (Vari ("A") ("*") ("x1"))))  (VarOp (SingleNode (Vari ("B") ("*") ("x2")))) )) ["James", "James"]
--OpTree example
(ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))

(EquateNode (SingleNode (Vari ("A") ("*") ("x1")))  (SingleNode (Vari ("B") ("*") ("x2"))))

(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("James") ("x2")))  )
(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("Towns") ("x2")))  )

(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("James") ("x1")))  )
(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("Not James") ("x1")))  )
--Equate example
(EquateNode (VarOp (SingleNode ((Vari "A" "J" "x1")))) (VarOp (SingleNode ((Vari "B" "J" "x2")) ) ) )
--VarTree example
(CommaNode (Vari "A" "*" "x1") (CommaNode (Vari "A" "*" "x2") (SingleNode (Vari "A" "*" "x3"))))



-- ======================================================== EXISTENTIAL TESTS ===============================================================
--Simple ExisVar case: ( ExistVar (SingleNode (Vari "A" "Yo" "z5")) (RelationNode ("B") (SingleNode (Vari ("B") ("Yo") ("z5")))) )


--Too long cba to fix syntax errors n shit
checkExistential (ExistVar (SingleNode (Vari "A" "HELLO" "x3") (CommaNode (Vari "A" "*" "x1") (CommaNode (Vari "A" "*" "x2") (SingleNode (Vari "A" "*" "x3")))))     )


checkExistential ( ExistVar (SingleNode (Vari "A" "Yo" "z5")) (RelationNode ("B") (SingleNode (Vari ("B") ("Yo") ("z5")))) ) --Should return T as tableName not relevant with an Exis variable
-- >True

--PR6: 



-- ======================================================== areRepeats DEBUGGING ===============================================================


--HANG OCCURS HERE : FIXED
areRepeats(getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))) )) 0
areRepeats(getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("James") ("x1"))))) )) 0
areRepeats(getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("James") ("x2"))))) )) 0


--getRepeats (WORKS)
getRepeats (getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("James") ("x1"))))) )) (1)
--Output = [Vari "A" "James" "x1",Vari "A" "James" "x1"]
getRepeats (getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("Towns") ("x2"))))) )) (1)

filterRepeats (groupRepeats [(Vari "A" "James" "x1"), (Vari "B" "Elliott" "x1"), (Vari "B" "Cian" "x2"), (Vari "C" "Jake" "x3"), (Vari "C" "Tom" "x2")]
--GROUP REPEATS:
groupRepeats [(Vari "A" "James" "x1"), (Vari "B" "Elliott" "x1"), (Vari "C" "Tom" "x2"), (Vari "B" "Cian" "x2"), (Vari "C" "Jake" "x3")]


groupRepeats [(Vari "A" "James" "x1"), (Vari "C" "Tom" "x2"),  (Vari "B" "Elliott" "x1"), (Vari "B" "Cian" "x2"), (Vari "C" "Jake" "x3")]
--Output [[(Vari "A" "James" "x1"), (Vari "B" "Elliott" "x1")],[(Vari "C" "Tom" "x2"),(Vari "B" "Cian" "x2)]]

equalityTest (Vari "TRUETEST" "B" "x1") (Vari "TRUETEST" "C" "x1")
--Output TRUE
equalityTest (Vari "FALSETEST" "B" "x1") (Vari "FALSETEST" "C" "x2")
--Output FALSE

-- ========================================================   WORKING / FIXED FUNCTIONS   ===========================================================
-- ======================================================== ( Not tested for exis cases ) ===============================================================

matchNodeFromName [Vari "A" "James" "x1",Vari "A" "James" "x1"] "x1"  

--Potentially too stupid for exis cases:
populateVarTree (CommaNode (Vari "A" "*" "x1") (CommaNode (Vari "A" "*" "x2") (SingleNode (Vari "A" "*" "x3")))) ["1a", "2b", "3c"] 0


checkAllDataSame ([Vari "A" "James" "x1",Vari "A" "James" "x1"]) ("James")

executeQuery [[(Vari ("A") ("James") ("") ),(Vari ("B") ("Towns") ("") )],[(Vari ("A") ("Perrine") ("") ),(Vari ("B") ("Lindsay") ("") )]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))  )

executeQuery [["James", "Towns"],["Perrine","Lindsay"]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) (EquateNode (SingleNode (Vari ("A") ("*") ("x1")))  (SingleNode (Vari ("B") ("*") ("x2")))) )

evaluateParseTree (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))  ) (["James","Towns"])

evaluateParseTree (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) (EquateNode (VarOp (SingleNode ((Vari "A" "*" "x1")))) (VarOp (SingleNode ((Vari "B" "*" "x2")) ) ) )  ) (["James","Towns"])




--Should be true: (WORKS)
evaluate (    populateTree ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))) ["James","Towns"] (0)     )
--Should be false: (WORKS)
evaluate((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))

--
populateTree (sanitiseOpTree((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))) (["James","Towns"]) (0)

populateTree ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))) ["James","Towns"] (0)

((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))



--Works?:
getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))) )


====NEW TESTS======

(CommaNode (SingleNode (Vari "*" "*" "*") ) (SingleNode (Vari "*" "*" "*") ) )
(CommaNode ( (Vari "*" "*" "x1") ) (SingleNode (Vari "*" "*" "x2") ) )

populateVarTree (CommaNode (Vari "A" "*" "x1") (SingleNode (Vari "A" "*" "x2")))   [Vari "A" "james1" "a",Vari "A" "james2" "b"]

executeQuery [[(Vari ("A") ("James") ("") ),(Vari ("B") ("Towns") ("") ),(Vari ("A") ("Perrine") ("") ),(Vari ("B") ("Lindsay") ("") )]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(CommaNode ( (Vari "*" "*" "x1") ) (SingleNode (Vari "*" "*" "x2") ) ))(RelationNode ("B") (CommaNode ( (Vari "*" "*" "x3") ) (SingleNode (Vari "*" "*" "x4") ) ))))  )


popTree ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))) [(Vari "A" "James" "*"),(Vari "B" "Towns" "*")]

popTree ((ConjunctionNode(RelationNode("A")(CommaNode ( (Vari "A" "*" "x1") ) (SingleNode (Vari "A" "*" "x2") ) ))(RelationNode ("B") (CommaNode ( (Vari "B" "*" "x3") ) (SingleNode (Vari "B" "*" "x4") ) )))) [(Vari ("A") ("James") ("") ),(Vari ("A") ("Towns") ("") )]
--PR3: 
--PR3 tree raw out
Marker [Vari "*" "*" "x1",Vari "*" "*" "x2"] (ConjunctionNode (ConjunctionNode (RelationNode "P" (SingleNode (Vari "P" "*" "x1"))) (RelationNode "Q" (SingleNode (Vari "Q" "*" "x2")))) (EquateNode (VarOp (SingleNode (Vari "*" "*" "x1"))) (VarOp (SingleNode (Vari "*" "*" "x2")))))
(Marker [Vari "*" "*" "x1",Vari "*" "*" "x2"] (ConjunctionNode (ConjunctionNode (RelationNode "P" (SingleNode (Vari "P" "James" "x1"))) (RelationNode "Q" (SingleNode (Vari "Q" "James" "x2")))) (EquateNode (VarOp (SingleNode (Vari "P" "James" "x1"))) (VarOp (SingleNode (Vari "Q" "James" "x2"))))))


executeQuery [[Vari "P" "1" "*",Vari "Q" "1" "*"],[Vari "P" "1" "*",Vari "Q" "2" "*"],[Vari "P" "1" "*",Vari "Q" "2" "*"],[Vari "P" "1" "*",Vari "Q" "Sofa" "*"],[Vari "P" "2" "*",Vari "Q" "1" "*"],[Vari "P" "2" "*",Vari "Q" "2" "*"],[Vari "P" "2" "*",Vari "Q" "2" "*"],[Vari "P" "2" "*",Vari "Q" "Sofa" "*"],[Vari "P" "3" "*",Vari "Q" "1" "*"],[Vari "P" "3" "*",Vari "Q" "2" "*"],[Vari "P" "3" "*",Vari "Q" "2" "*"],[Vari "P" "3" "*",Vari "Q" "Sofa" "*"],[Vari "P" "4" "*",Vari "Q" "1" "*"],[Vari "P" "4" "*",Vari "Q" "2" "*"],[Vari "P" "4" "*",Vari "Q" "2" "*"],[Vari "P" "4" "*",Vari "Q" "Sofa" "*"]] (Marker [Vari "*" "*" "x1",Vari "*" "*" "x2"] (ConjunctionNode (ConjunctionNode (RelationNode "P" (SingleNode (Vari "P" "*" "x1"))) (RelationNode "Q" (SingleNode (Vari "Q" "*" "x2")))) (EquateNode (VarOp (SingleNode (Vari "*" "*" "x1"))) (VarOp (SingleNode (Vari "*" "*" "x2"))))))


[(Vari ("A") ("James") ("") ),(Vari ("A") ("Towns") ("") ),(Vari ("B") ("Perrine") ("") ),(Vari ("B") ("Lindsay") ("") )]


executeQuery [[(Vari ("A") ("James") ("") ),(Vari ("A") ("Towns") ("") ),(Vari ("B") ("Perrine") ("") ),(Vari ("B") ("Lindsay") ("") )]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(CommaNode ( (Vari "A" "*" "x1") ) (SingleNode (Vari "A" "*" "x2") ) ))(RelationNode ("B") (CommaNode ( (Vari "B" "*" "x3") ) (SingleNode (Vari "B" "*" "x4") ) ))))  )--[[Vari "*" "Towns" "x1",Vari "*" "James" "x2",Vari "*" "Lindsay" "x3",Vari "*" "Perrine" "x4"]]
executeQuery  [[Vari "A" "Sofiane" "*",Vari "A" "Boufal" "*",Vari "B" "Boufal" "*",Vari "B" "Maserati" "*"],[Vari "A" "Sofiane" "*",Vari "A" "Boufal" "*",Vari "B" "Carillo" "*",Vari "B" "Ferrari" "*"],[Vari "A" "Dusan" "*",Vari "A" "Tadic" "*",Vari "B" "Boufal" "*",Vari "B" "Maserati" "*"],[Vari "A" "Dusan" "*",Vari "A" "Tadic" "*",Vari "B" "Carillo" "*",Vari "B" "Ferrari" "*"],[Vari "A" "Guido" "*",Vari "A" "Carillo" "*",Vari "B" "Boufal" "*",Vari "B" "Maserati" "*"],[Vari "A" "Guido" "*",Vari "A" "Carillo" "*",Vari "B" "Carillo" "*",Vari "B" "Ferrari" "*"]]    (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(CommaNode ( (Vari "A" "*" "x1") ) (SingleNode (Vari "A" "*" "x2") ) ))(RelationNode ("B") (CommaNode ( (Vari "B" "*" "x3") ) (SingleNode (Vari "B" "*" "x4") ) ))))  )
executeQuery  [[Vari "A" "Pawel" "*",Vari "A" "Sobocinski" "*",Vari "B" "Julian" "*",Vari "B" "Rathke" "*"]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(CommaNode ( (Vari "A" "*" "x1") ) (SingleNode (Vari "A" "*" "x2") ) ))(RelationNode ("B") (CommaNode ( (Vari "B" "*" "x3") ) (SingleNode (Vari "B" "*" "x4") ) ))))  )--[[Vari "*" "Towns" "x1",Vari "*" "James" "x2",Vari "*" "Lindsay" "x3",Vari "*" "Perrine" "x4"]]

--===============================================PR3=================================
--BigTable PR1:
[[Vari "A" "Pawel" "*",Vari "A" "Sobocinski" "*",Vari "B" "Julian" "*",Vari "B" "Rathke" "*"]]
--BigTable PR3:
[[Vari "A" "Sofiane" "*",Vari "A" "Boufal" "*",Vari "B" "Boufal" "*",Vari "B" "Maserati" "*"],[Vari "A" "Sofiane" "*",Vari "A" "Boufal" "*",Vari "B" "Carillo" "*",Vari "B" "Ferrari" "*"],[Vari "A" "Dusan" "*",Vari "A" "Tadic" "*",Vari "B" "Boufal" "*",Vari "B" "Maserati" "*"],[Vari "A" "Dusan" "*",Vari "A" "Tadic" "*",Vari "B" "Carillo" "*",Vari "B" "Ferrari" "*"],[Vari "A" "Guido" "*",Vari "A" "Carillo" "*",Vari "B" "Boufal" "*",Vari "B" "Maserati" "*"],[Vari "A" "Guido" "*",Vari "A" "Carillo" "*",Vari "B" "Carillo" "*",Vari "B" "Ferrari" "*"]]





ConjunctionNode (ConjunctionNode (RelationNode "P" (SingleNode (Vari "P" "HI" "x1"))) (RelationNode "Q" (SingleNode (Vari "Q" "HI" "x2")))) (EquateNode (VarOp (SingleNode (Vari "*" "*" "x1"))) (VarOp (SingleNode (Vari "*" "*" "x2"))))

*Main> getUniqueState (ConjunctionNode (ConjunctionNode (RelationNode "P" (SingleNode (Vari "P" "HI" "x1"))) (RelationNode "Q" (SingleNode (Vari "Q" "HI" "x2")))) (EquateNode (VarOp (SingleNode (Vari "*" "*" "x1"))) (VarOp (SingleNode (Vari "*" "*" "x2")))) )  False
[Vari "P" "HI" "x1",Vari "Q" "HI" "x2",Vari "*" "*" "x1",Vari "*" "*" "x2"]

--===============================================PR4============================================================

(Marker [Vari "*" "*" "x1",Vari "*" "*" "x2"] (ExistVar (SingleNode (Vari "*" "*" "z1")) (RelationNode "R" (CommaNode (Vari "R" "*" "x1") (SingleNode (Vari "R" "*" "z1"))))))

[[Vari "R" "Michelangelo" "*",Vari "R" "Buonarotti" "*"],[Vari "R" "Leonardo" "*",Vari "R" "Da Vinci" "*"],[Vari "R" "Antonello" "*",Vari "R" "Da Messina" "*"]]


iteration 2:

Marker [Vari "*" "*" "x1"] (ExistVar (SingleNode (Vari "*" "*" "z1")) (RelationNode "R" (CommaNode (Vari "R" "*" "x1") (SingleNode (Vari "R" "*" "z1")))))














--PR5:

[[Vari "B0" "Boufal" "*",Vari "B0" "Maserati" "*",Vari "A0" "Sofiane" "*",Vari "A0" "Boufal" "*"],[Vari "B0" "Boufal" "*",Vari "B0" "Maserati" "*",Vari "A0" "Dusan" "*",Vari "A0" "Tadic" "*"],[Vari "B0" "Boufal" "*",Vari "B0" "Maserati" "*",Vari "A0" "Guido" "*",Vari "A0" "Carillo" "*"],[Vari "B0" "Carillo" "*",Vari "B0" "Ferrari" "*",Vari "A0" "Sofiane" "*",Vari "A0" "Boufal" "*"],[Vari "B0" "Carillo" "*",Vari "B0" "Ferrari" "*",Vari "A0" "Dusan" "*",Vari "A0" "Tadic" "*"],[Vari "B0" "Carillo" "*",Vari "B0" "Ferrari" "*",Vari "A0" "Guido" "*",Vari "A0" "Carillo" "*"]]

Marker [Vari "*" "*" "x1",Vari "*" "*" "x2"] (ExistVar (SingleNode (Vari "A0" "*" "z1")) (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "*" "x1") (SingleNode (Vari "A0" "*" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "*" "z1") (SingleNode (Vari "B0" "*" "x2"))))))

(ExistVar (SingleNode (Vari "A0" "*" "z1")) (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "*" "x1") (SingleNode (Vari "A0" "*" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "*" "z1") (SingleNode (Vari "B0" "*" "x2"))))))

evaluate (ExistVar (SingleNode (Vari "A0" "*" "z1")) (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "*" "x1") (SingleNode (Vari "A0" "*" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "*" "z1") (SingleNode (Vari "B0" "*" "x2")))))) ([[Vari "A0" "Sofiane" "*",Vari "A0" "Boufal" "*",Vari "B0" "Boufal" "*",Vari "B0" "Maserati" "*"],[Vari "A0" "Sofiane" "*",Vari "A0" "Boufal" "*",Vari "B0" "Carillo" "*",Vari "B0" "Ferrari" "*"],[Vari "A0" "Dusan" "*",Vari "A0" "Tadic" "*",Vari "B0" "Boufal" "*",Vari "B0" "Maserati" "*"],[Vari "A0" "Dusan" "*",Vari "A0" "Tadic" "*",Vari "B0" "Carillo" "*",Vari "B0" "Ferrari" "*"],[Vari "A0" "Guido" "*",Vari "A0" "Carillo" "*",Vari "B0" "Boufal" "*",Vari "B0" "Maserati" "*"],[Vari "A0" "Guido" "*",Vari "A0" "Carillo" "*",Vari "B0" "Carillo" "*",Vari "B0" "Ferrari" "*"]])



ExistVar (SingleNode (Vari "A0" "*" "z1")) (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "Sofiane" "x1") (SingleNode (Vari "A0" "Boufal" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "Boufal" "z1") (SingleNode (Vari "B0" "Maserati" "x2")))))


--PR10 PTree:


Marker [Vari "*" "*" "x1",Vari "*" "*" "x2",Vari "*" "*" "x3"] (ConjunctionNode (RelationNode "S" (CommaNode (Vari "S" "*" "x1") (CommaNode (Vari "S" "*" "x2") (SingleNode (Vari "S" "*" "x3"))))) (ExistVar (CommaNode (Vari "*" "*" "z1") (SingleNode (Vari "*" "*" "z2"))) (RelationNode "S" (CommaNode (Vari "S" "*" "z1") (CommaNode (Vari "S" "*" "z1") (SingleNode (Vari "S" "*" "z2")))))))



executeQuery ([[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"]]) ([[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"]]) (Marker [Vari "*" "*" "x1",Vari "*" "*" "x2",Vari "*" "*" "x3"] (ConjunctionNode (RelationNode "S" (CommaNode (Vari "S" "*" "x1") (CommaNode (Vari "S" "*" "x2") (SingleNode (Vari "S" "*" "x3"))))) (ExistVar (CommaNode (Vari "*" "*" "z1") (SingleNode (Vari "*" "*" "z2"))) (RelationNode "S" (CommaNode (Vari "S" "*" "z1") (CommaNode (Vari "S" "*" "z1") (SingleNode (Vari "S" "*" "z2")))))))) 

[[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"]]

[[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "A" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "B" "*"],[Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*",Vari "S" "A" "*",Vari "S" "B" "*",Vari "S" "C" "*"]]


Marker [Vari "*" "*" "x1",Vari "*" "*" "x2",Vari "*" "*" "x3"] (ConjunctionNode (RelationNode "S" (CommaNode (Vari "S" "*" "x1") (CommaNode (Vari "S" "*" "x2") (SingleNode (Vari "S" "*" "x3"))))) (ExistVar (CommaNode (Vari "*" "*" "z1") (SingleNode (Vari "*" "*" "z2"))) (RelationNode "S" (CommaNode (Vari "S" "*" "z1") (CommaNode (Vari "S" "*" "z1") (SingleNode (Vari "S" "*" "z2")))))))

*Main> evaluate (ExistVar (SingleNode (Vari "A0" "*" "z1")) (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "Sofiane" "x1") (SingleNode (Vari "A0" "Boufal" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "Boufal" "z1") (SingleNode (Vari "B0" "Maserati" "x2"))))))
True



--PR9:



Marker [Vari "*" "*" "x1",Vari "*" "*" "x2"] (ExistVar (CommaNode (Vari "A0" "*" "z1") (SingleNode (Vari "B0" "*" "z2"))) (ConjunctionNode (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "*" "x1") (SingleNode (Vari "A0" "*" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "*" "z1") (SingleNode (Vari "B0" "*" "z2"))))) (RelationNode "C0" (CommaNode (Vari "C0" "*" "z2") (SingleNode (Vari "C0" "*" "x2"))))))

(ExistVar (CommaNode (Vari "A0" "*" "z1") (SingleNode (Vari "B0" "*" "z2"))) (ConjunctionNode (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "*" "x1") (SingleNode (Vari "A0" "*" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "*" "z1") (SingleNode (Vari "B0" "*" "z2"))))) (RelationNode "C0" (CommaNode (Vari "C0" "*" "z2") (SingleNode (Vari "C0" "*" "x2"))))))

popTree (ExistVar (CommaNode (Vari "A0" "*" "z1") (SingleNode (Vari "B0" "*" "z2"))) (ConjunctionNode (ConjunctionNode (RelationNode "A0" (CommaNode (Vari "A0" "*" "x1") (SingleNode (Vari "A0" "*" "z1")))) (RelationNode "B0" (CommaNode (Vari "B0" "*" "z1") (SingleNode (Vari "B0" "*" "z2"))))) (RelationNode "C0" (CommaNode (Vari "C0" "*" "z2") (SingleNode (Vari "C0" "*" "x2")))))) ([Vari "A0" "A" "*",Vari "A0" "C" "*",Vari "B0" "C" "*",Vari "B0" "D" "*",Vari "C0" "D" "*",Vari "C0" "E" "*"]) 


