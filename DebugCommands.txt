--Directory
--C:\Users\James\Documents\GitHub\PLC_1718\src
--ParseTree example
(Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))  )
(Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) (EquateNode (SingleNode (Vari ("A") ("*") ("x1")))  (SingleNode (Vari ("B") ("*") ("x2"))))  )

evaluateParseTree (Marker ([(Vari "*" "*" "x1" ),(Vari "*" "*" "x2" )]) (EquateNode (VarOp(SingleNode (Vari ("A") ("*") ("x1"))))  (VarOp (SingleNode (Vari ("B") ("*") ("x2")))) )) ["James", "James"]
--OpTree example
(ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))

(EquateNode (SingleNode (Vari ("A") ("*") ("x1")))  (SingleNode (Vari ("B") ("*") ("x2"))))

(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("James") ("x2")))  )
(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("Towns") ("x2")))  )

(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("James") ("x1")))  )
(EquateNode (SingleNode (Vari ("A") ("James") ("x1")))  (SingleNode (Vari ("B") ("Not James") ("x1")))  )
--Equate example
(EquateNode (VarOp (SingleNode ((Vari "A" "J" "x1")))) (VarOp (SingleNode ((Vari "B" "J" "x2")) ) ) )
--VarTree example
(CommaNode (Vari "A" "*" "x1") (CommaNode (Vari "A" "*" "x2") (SingleNode (Vari "A" "*" "x3"))))


executeQuery [["James", "Towns"],["Perrine","Lindsay"]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))  )

executeQuery [["James", "Towns"],["Perrine","Lindsay"]] (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) (EquateNode (SingleNode (Vari ("A") ("*") ("x1")))  (SingleNode (Vari ("B") ("*") ("x2")))) )

evaluateParseTree (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))  ) (["James","Towns"])

evaluateParseTree (Marker ([(Vari ("*") ("*") ("x1") ),(Vari ("*") ("*") ("x2") )]) (EquateNode (VarOp (SingleNode ((Vari "A" "*" "x1")))) (VarOp (SingleNode ((Vari "B" "*" "x2")) ) ) )  ) (["James","Towns"])


--HANG OCCURS HERE
areRepeats(getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))) )) 0
areRepeats(getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("James") ("x1"))))) )) 0
areRepeats(getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("James") ("x2"))))) )) 0

--Should be true: (WORKS)
evaluate (    populateTree ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))) ["James","Towns"] (0)     )
--Should be false: (WORKS)
evaluate((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))

--Dont work right
populateTree (sanitiseOpTree((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))))) (["James","Towns"]) (0)

populateTree ((ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2")))))) ["James","Towns"] (0)

--Error here. Indexing. fixed
populateVarTree (CommaNode (Vari "A" "*" "x1") (CommaNode (Vari "A" "*" "x2") (SingleNode (Vari "A" "*" "x3")))) ["1a", "2b", "3c"] 0

--Works?:
getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("*") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("*") ("x2"))))) )


--EXISITENTIAL CHECKINGGGGGGGG




checkExistential (ExistVar (SingleNode (Vari "A" "HELLO" "x3") (CommaNode (Vari "A" "*" "x1") (CommaNode (Vari "A" "*" "x2") (SingleNode (Vari "A" "*" "x3")))







--areRepeats debugging:

--getRepeats (WORKS)
getRepeats (getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("James") ("x1"))))) )) (1)
--Output = [Vari "A" "James" "x1",Vari "A" "James" "x1"]
getRepeats (getTreeState ( (ConjunctionNode(RelationNode("A")(SingleNode (Vari ("A") ("James") ("x1"))))(RelationNode ("B") (SingleNode (Vari ("B") ("Towns") ("x2"))))) )) (1)

filterRepeats (groupRepeats [(Vari "A" "James" "x1"), (Vari "B" "Elliott" "x1"), (Vari "B" "Cian" "x2"), (Vari "C" "Jake" "x3"), (Vari "C" "Tom" "x2")]
--GROUP REPEATS:
groupRepeats [(Vari "A" "James" "x1"), (Vari "B" "Elliott" "x1"), (Vari "C" "Tom" "x2"), (Vari "B" "Cian" "x2"), (Vari "C" "Jake" "x3")]


groupRepeats [(Vari "A" "James" "x1"), (Vari "C" "Tom" "x2"),  (Vari "B" "Elliott" "x1"), (Vari "B" "Cian" "x2"), (Vari "C" "Jake" "x3")]
--Output [[(Vari "A" "James" "x1"), (Vari "B" "Elliott" "x1")],[(Vari "C" "Tom" "x2"),(Vari "B" "Cian" "x2)]]

equalityTest (Vari "TRUETEST" "B" "x1") (Vari "TRUETEST" "C" "x1")
--Output TRUE
equalityTest (Vari "FALSETEST" "B" "x1") (Vari "FALSETEST" "C" "x2")
--Output FALSE

--WORKS
matchNodeFromName [Vari "A" "James" "x1",Vari "A" "James" "x1"] "x1"  



checkAllDataSame ([Vari "A" "James" "x1",Vari "A" "James" "x1"]) ("James")




